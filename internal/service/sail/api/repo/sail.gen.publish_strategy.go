package repo

import (
	"context"
	"fmt"
	"github.com/HYY-yu/sail/internal/service/sail/model"
	"gorm.io/gorm"
)

// Code generated by gormt. DO NOT EDIT.

// 非线程安全

type _PublishStrategyMgr struct {
	*_BaseMgr
}

// PublishStrategyMgr open func
func PublishStrategyMgr(ctx context.Context, db *gorm.DB) *_PublishStrategyMgr {
	if db == nil {
		panic(fmt.Errorf("PublishStrategyMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(ctx)
	return &_PublishStrategyMgr{_BaseMgr: &_BaseMgr{DB: db.Table("publish_strategy").WithContext(ctx), isRelated: globalIsRelated, ctx: ctx, cancel: cancel}}
}

func (obj *_PublishStrategyMgr) WithSelects(idName string, selects ...string) *_PublishStrategyMgr {
	if len(idName) > 0 {
		selects = append(selects, idName)
	}
	if len(selects) > 0 {
		// 对Select进行去重
		selectMap := make(map[string]int, len(selects))
		for _, e := range selects {
			if _, ok := selectMap[e]; !ok {
				selectMap[e] = 1
			}
		}

		newSelects := make([]string, 0, len(selects))
		for k := range selectMap {
			if len(k) > 0 {
				newSelects = append(newSelects, k)
			}
		}
		obj.DB = obj.DB.Select(newSelects)
	}
	return obj
}

func (obj *_PublishStrategyMgr) WithOptions(opts ...Option) *_PublishStrategyMgr {
	obj.Reset()

	options := options{
		query: make(map[string]queryData, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	for k, v := range options.query {
		if v.data == nil {
			obj.DB = obj.DB.Where(k + " " + v.cond)
		} else {
			obj.DB = obj.DB.Where(k+" "+v.cond, v.data)
		}
	}
	return obj
}

// GetTableName get sql table name.获取表名字
func (obj *_PublishStrategyMgr) GetTableName() string {
	return "publish_strategy"
}

// Tx 开启事务会话
func (obj *_PublishStrategyMgr) Tx(tx *gorm.DB) *_PublishStrategyMgr {
	obj.DB = tx.Table(obj.GetTableName()).WithContext(obj.ctx)
	return obj
}

// WithPrepareStmt 开启语句 PrepareStmt 功能
// 接下来执行的SQL将会是PrepareStmt的
func (obj *_PublishStrategyMgr) WithPrepareStmt() {
	obj.DB = obj.DB.Session(&gorm.Session{Context: obj.ctx, PrepareStmt: true})
}

// Reset 重置gorm会话
func (obj *_PublishStrategyMgr) Reset() *_PublishStrategyMgr {
	obj.DB = obj.DB.Session(&gorm.Session{NewDB: true, Context: obj.ctx}).Table(obj.GetTableName())
	return obj
}

// Get 获取
func (obj *_PublishStrategyMgr) Get() (result model.PublishStrategy, err error) {
	err = obj.DB.Find(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_PublishStrategyMgr) Gets() (results []model.PublishStrategy, err error) {
	err = obj.DB.Find(&results).Error

	return
}

// Catch 必须获取结果（单条）
func (obj *_PublishStrategyMgr) Catch() (results model.PublishStrategy, err error) {
	err = obj.DB.Take(&results).Error

	return
}

func (obj *_PublishStrategyMgr) Count() (count int64, err error) {
	err = obj.DB.Count(&count).Error

	return
}

func (obj *_PublishStrategyMgr) HasRecord() (bool, error) {
	count, err := obj.Count()
	if err != nil {
		return false, err
	}
	return count != 0, nil
}

// WithID id获取
func (obj *_PublishStrategyMgr) WithID(id interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["id"] = queryData{
			cond: cond[0],
			data: id,
		}
	})
}

// WithPublishID publish_id获取
func (obj *_PublishStrategyMgr) WithPublishID(publishID interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["publish_id"] = queryData{
			cond: cond[0],
			data: publishID,
		}
	})
}

// WithType type获取 发布类型
func (obj *_PublishStrategyMgr) WithType(_type interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["type"] = queryData{
			cond: cond[0],
			data: _type,
		}
	})
}

// WithData data获取
func (obj *_PublishStrategyMgr) WithData(data interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["data"] = queryData{
			cond: cond[0],
			data: data,
		}
	})
}

// WithStatus status获取
func (obj *_PublishStrategyMgr) WithStatus(status interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["status"] = queryData{
			cond: cond[0],
			data: status,
		}
	})
}

// WithResult result获取
func (obj *_PublishStrategyMgr) WithResult(result interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["result"] = queryData{
			cond: cond[0],
			data: result,
		}
	})
}

// WithCreateTime create_time获取
func (obj *_PublishStrategyMgr) WithCreateTime(createTime interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["create_time"] = queryData{
			cond: cond[0],
			data: createTime,
		}
	})
}

// WithUpdateTime update_time获取
func (obj *_PublishStrategyMgr) WithUpdateTime(updateTime interface{}, cond ...string) Option {
	return optionFunc(func(o *options) {
		if len(cond) == 0 {
			cond = []string{" = ? "}
		}
		o.query["update_time"] = queryData{
			cond: cond[0],
			data: updateTime,
		}
	})
}

func (obj *_PublishStrategyMgr) CreatePublishStrategy(bean *model.PublishStrategy) (err error) {
	err = obj.DB.Create(bean).Error

	return
}

func (obj *_PublishStrategyMgr) UpdatePublishStrategy(bean *model.PublishStrategy) (err error) {
	err = obj.DB.Updates(bean).Error

	return
}

func (obj *_PublishStrategyMgr) DeletePublishStrategy(bean *model.PublishStrategy) (err error) {
	err = obj.DB.Delete(bean).Error

	return
}

// FetchIndexByPublishID  获取多个内容
func (obj *_PublishStrategyMgr) FetchIndexByPublishID(publishID int) (results []*model.PublishStrategy, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.PublishStrategy{}).Where("`publish_id` = ?", publishID).Find(&results).Error

	return
}
