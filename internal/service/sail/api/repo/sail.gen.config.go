package repo

import (
	"context"
	"fmt"
	"gorm.io/gorm"
)

// Code generated by gormt. DO NOT EDIT.

type _ConfigMgr struct {
	*_BaseMgr
}

// ConfigMgr open func
func ConfigMgr(db *gorm.DB) *_ConfigMgr {
	if db == nil {
		panic(fmt.Errorf("ConfigMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(context.Background())
	return &_ConfigMgr{_BaseMgr: &_BaseMgr{DB: db.Table("config"), isRelated: globalIsRelated, ctx: ctx, cancel: cancel, timeout: -1}}
}

// WithContext set context to db
func (obj *_ConfigMgr) WithContext(c context.Context) *_ConfigMgr {
	if c != nil {
		obj.ctx = c
	}
	return obj
}

func (obj *_ConfigMgr) WithSelects(idName string, selects ...string) *_ConfigMgr {
	if len(selects) > 0 {
		if len(idName) > 0 {
			selects = append(selects, idName)
		}
		// 对Select进行去重
		selectMap := make(map[string]int, len(selects))
		for _, e := range selects {
			if _, ok := selectMap[e]; !ok {
				selectMap[e] = 1
			}
		}

		newSelects := make([]string, 0, len(selects))
		for k := range selectMap {
			if len(k) > 0 {
				newSelects = append(newSelects, k)
			}
		}
		obj.DB = obj.DB.Select(newSelects)
	}
	return obj
}

func (obj *_ConfigMgr) WithOmit(omit ...string) *_ConfigMgr {
	if len(omit) > 0 {
		obj.DB = obj.DB.Omit(omit...)
	}
	return obj
}

func (obj *_ConfigMgr) WithOptions(opts ...Option) *_ConfigMgr {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	obj.DB = obj.DB.Where(options.query)
	return obj
}

// GetTableName get sql table name.获取数据库名字
func (obj *_ConfigMgr) GetTableName() string {
	return "config"
}

// Reset 重置gorm会话
func (obj *_ConfigMgr) Reset() *_ConfigMgr {
	obj.new()
	return obj
}

// Get 获取
func (obj *_ConfigMgr) Get() (result Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Find(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_ConfigMgr) Gets() (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Find(&results).Error

	return
}

func (obj *_ConfigMgr) Count(count *int64) (tx *gorm.DB) {
	return obj.DB.WithContext(obj.ctx).Model(Config{}).Count(count)
}

// WithID id获取
func (obj *_ConfigMgr) WithID(id int) Option {
	return optionFunc(func(o *options) { o.query["id"] = id })
}

// WithName name获取
func (obj *_ConfigMgr) WithName(name string) Option {
	return optionFunc(func(o *options) { o.query["name"] = name })
}

// WithProjectGroupID project_group_id获取
func (obj *_ConfigMgr) WithProjectGroupID(projectGroupID int) Option {
	return optionFunc(func(o *options) { o.query["project_group_id"] = projectGroupID })
}

// WithNamespaceID namespace_id获取
func (obj *_ConfigMgr) WithNamespaceID(namespaceID int) Option {
	return optionFunc(func(o *options) { o.query["namespace_id"] = namespaceID })
}

// WithIsPublic is_public获取
func (obj *_ConfigMgr) WithIsPublic(isPublic bool) Option {
	return optionFunc(func(o *options) { o.query["is_public"] = isPublic })
}

// WithIsLinkPublic is_link_public获取
func (obj *_ConfigMgr) WithIsLinkPublic(isLinkPublic bool) Option {
	return optionFunc(func(o *options) { o.query["is_link_public"] = isLinkPublic })
}

// WithIsEncrypt is_encrypt获取
func (obj *_ConfigMgr) WithIsEncrypt(isEncrypt bool) Option {
	return optionFunc(func(o *options) { o.query["is_encrypt"] = isEncrypt })
}

// WithConfigType config_type获取
func (obj *_ConfigMgr) WithConfigType(configType int) Option {
	return optionFunc(func(o *options) { o.query["config_type"] = configType })
}

// WithConfigKey config_key获取
func (obj *_ConfigMgr) WithConfigKey(configKey string) Option {
	return optionFunc(func(o *options) { o.query["config_key"] = configKey })
}

// GetFromID 通过id获取内容
func (obj *_ConfigMgr) GetFromID(id int) (result Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`id` = ?", id).Find(&result).Error

	return
}

// GetBatchFromID 批量查找
func (obj *_ConfigMgr) GetBatchFromID(ids []int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`id` IN (?)", ids).Find(&results).Error

	return
}

// GetFromName 通过name获取内容
func (obj *_ConfigMgr) GetFromName(name string) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`name` = ?", name).Find(&results).Error

	return
}

// GetBatchFromName 批量查找
func (obj *_ConfigMgr) GetBatchFromName(names []string) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`name` IN (?)", names).Find(&results).Error

	return
}

// GetFromProjectGroupID 通过project_group_id获取内容
func (obj *_ConfigMgr) GetFromProjectGroupID(projectGroupID int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`project_group_id` = ?", projectGroupID).Find(&results).Error

	return
}

// GetBatchFromProjectGroupID 批量查找
func (obj *_ConfigMgr) GetBatchFromProjectGroupID(projectGroupIDs []int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`project_group_id` IN (?)", projectGroupIDs).Find(&results).Error

	return
}

// GetFromNamespaceID 通过namespace_id获取内容
func (obj *_ConfigMgr) GetFromNamespaceID(namespaceID int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`namespace_id` = ?", namespaceID).Find(&results).Error

	return
}

// GetBatchFromNamespaceID 批量查找
func (obj *_ConfigMgr) GetBatchFromNamespaceID(namespaceIDs []int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`namespace_id` IN (?)", namespaceIDs).Find(&results).Error

	return
}

// GetFromIsPublic 通过is_public获取内容
func (obj *_ConfigMgr) GetFromIsPublic(isPublic bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_public` = ?", isPublic).Find(&results).Error

	return
}

// GetBatchFromIsPublic 批量查找
func (obj *_ConfigMgr) GetBatchFromIsPublic(isPublics []bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_public` IN (?)", isPublics).Find(&results).Error

	return
}

// GetFromIsLinkPublic 通过is_link_public获取内容
func (obj *_ConfigMgr) GetFromIsLinkPublic(isLinkPublic bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_link_public` = ?", isLinkPublic).Find(&results).Error

	return
}

// GetBatchFromIsLinkPublic 批量查找
func (obj *_ConfigMgr) GetBatchFromIsLinkPublic(isLinkPublics []bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_link_public` IN (?)", isLinkPublics).Find(&results).Error

	return
}

// GetFromIsEncrypt 通过is_encrypt获取内容
func (obj *_ConfigMgr) GetFromIsEncrypt(isEncrypt bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_encrypt` = ?", isEncrypt).Find(&results).Error

	return
}

// GetBatchFromIsEncrypt 批量查找
func (obj *_ConfigMgr) GetBatchFromIsEncrypt(isEncrypts []bool) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`is_encrypt` IN (?)", isEncrypts).Find(&results).Error

	return
}

// GetFromConfigType 通过config_type获取内容
func (obj *_ConfigMgr) GetFromConfigType(configType int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`config_type` = ?", configType).Find(&results).Error

	return
}

// GetBatchFromConfigType 批量查找
func (obj *_ConfigMgr) GetBatchFromConfigType(configTypes []int) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`config_type` IN (?)", configTypes).Find(&results).Error

	return
}

// GetFromConfigKey 通过config_key获取内容
func (obj *_ConfigMgr) GetFromConfigKey(configKey string) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`config_key` = ?", configKey).Find(&results).Error

	return
}

// GetBatchFromConfigKey 批量查找
func (obj *_ConfigMgr) GetBatchFromConfigKey(configKeys []string) (results []*Config, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Where("`config_key` IN (?)", configKeys).Find(&results).Error

	return
}

func (obj *_ConfigMgr) CreateConfig(bean *Config) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Create(bean).Error

	return
}

func (obj *_ConfigMgr) UpdateConfig(bean *Config) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(bean).Updates(bean).Error

	return
}

func (obj *_ConfigMgr) DeleteConfig(bean *Config) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(Config{}).Delete(bean).Error

	return
}
