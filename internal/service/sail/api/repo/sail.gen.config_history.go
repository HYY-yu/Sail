package repo

import (
	"context"
	"fmt"
	"time"

	"gorm.io/gorm"

	"github.com/HYY-yu/sail/internal/service/sail/model"
)

// Code generated by gormt. DO NOT EDIT.

type _ConfigHistoryMgr struct {
	*_BaseMgr
}

// ConfigHistoryMgr open func
func ConfigHistoryMgr(db *gorm.DB) *_ConfigHistoryMgr {
	if db == nil {
		panic(fmt.Errorf("ConfigHistoryMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(context.Background())
	return &_ConfigHistoryMgr{_BaseMgr: &_BaseMgr{DB: db.Table("config_history"), isRelated: globalIsRelated, ctx: ctx, cancel: cancel, timeout: -1}}
}

// WithContext set context to db
func (obj *_ConfigHistoryMgr) WithContext(c context.Context) *_ConfigHistoryMgr {
	if c != nil {
		obj.ctx = c
	}
	return obj
}

func (obj *_ConfigHistoryMgr) WithSelects(idName string, selects ...string) *_ConfigHistoryMgr {
	if len(selects) > 0 {
		if len(idName) > 0 {
			selects = append(selects, idName)
		}
		// 对Select进行去重
		selectMap := make(map[string]int, len(selects))
		for _, e := range selects {
			if _, ok := selectMap[e]; !ok {
				selectMap[e] = 1
			}
		}

		newSelects := make([]string, 0, len(selects))
		for k := range selectMap {
			if len(k) > 0 {
				newSelects = append(newSelects, k)
			}
		}
		obj.DB = obj.DB.Select(newSelects)
	}
	return obj
}

func (obj *_ConfigHistoryMgr) WithOmit(omit ...string) *_ConfigHistoryMgr {
	if len(omit) > 0 {
		obj.DB = obj.DB.Omit(omit...)
	}
	return obj
}

func (obj *_ConfigHistoryMgr) WithOptions(opts ...Option) *_ConfigHistoryMgr {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	obj.DB = obj.DB.Where(options.query)
	return obj
}

// GetTableName get sql table name.获取数据库名字
func (obj *_ConfigHistoryMgr) GetTableName() string {
	return "config_history"
}

// Reset 重置gorm会话
func (obj *_ConfigHistoryMgr) Reset() *_ConfigHistoryMgr {
	obj.new()
	return obj
}

// Get 获取
func (obj *_ConfigHistoryMgr) Get() (result model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Find(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_ConfigHistoryMgr) Gets() (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Find(&results).Error

	return
}

func (obj *_ConfigHistoryMgr) Count(count *int64) (tx *gorm.DB) {
	return obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Count(count)
}

// WithID id获取
func (obj *_ConfigHistoryMgr) WithID(id int) Option {
	return optionFunc(func(o *options) { o.query["id"] = id })
}

// WithConfigID config_id获取
func (obj *_ConfigHistoryMgr) WithConfigID(configID int) Option {
	return optionFunc(func(o *options) { o.query["config_id"] = configID })
}

// WithReversion reversion获取
func (obj *_ConfigHistoryMgr) WithReversion(reversion int) Option {
	return optionFunc(func(o *options) { o.query["reversion"] = reversion })
}

// WithCreateTime create_time获取
func (obj *_ConfigHistoryMgr) WithCreateTime(createTime time.Time) Option {
	return optionFunc(func(o *options) { o.query["create_time"] = createTime })
}

// WithCreateBy create_by获取
func (obj *_ConfigHistoryMgr) WithCreateBy(createBy int) Option {
	return optionFunc(func(o *options) { o.query["create_by"] = createBy })
}

// GetFromID 通过id获取内容
func (obj *_ConfigHistoryMgr) GetFromID(id int) (result model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`id` = ?", id).Find(&result).Error

	return
}

// GetBatchFromID 批量查找
func (obj *_ConfigHistoryMgr) GetBatchFromID(ids []int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`id` IN (?)", ids).Find(&results).Error

	return
}

// GetFromConfigID 通过config_id获取内容
func (obj *_ConfigHistoryMgr) GetFromConfigID(configID int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`config_id` = ?", configID).Find(&results).Error

	return
}

// GetBatchFromConfigID 批量查找
func (obj *_ConfigHistoryMgr) GetBatchFromConfigID(configIDs []int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`config_id` IN (?)", configIDs).Find(&results).Error

	return
}

// GetFromReversion 通过reversion获取内容
func (obj *_ConfigHistoryMgr) GetFromReversion(reversion int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`reversion` = ?", reversion).Find(&results).Error

	return
}

// GetBatchFromReversion 批量查找
func (obj *_ConfigHistoryMgr) GetBatchFromReversion(reversions []int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`reversion` IN (?)", reversions).Find(&results).Error

	return
}

// GetFromCreateTime 通过create_time获取内容
func (obj *_ConfigHistoryMgr) GetFromCreateTime(createTime time.Time) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`create_time` = ?", createTime).Find(&results).Error

	return
}

// GetBatchFromCreateTime 批量查找
func (obj *_ConfigHistoryMgr) GetBatchFromCreateTime(createTimes []time.Time) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`create_time` IN (?)", createTimes).Find(&results).Error

	return
}

// GetFromCreateBy 通过create_by获取内容
func (obj *_ConfigHistoryMgr) GetFromCreateBy(createBy int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`create_by` = ?", createBy).Find(&results).Error

	return
}

// GetBatchFromCreateBy 批量查找
func (obj *_ConfigHistoryMgr) GetBatchFromCreateBy(createBys []int) (results []*model.ConfigHistory, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Where("`create_by` IN (?)", createBys).Find(&results).Error

	return
}

func (obj *_ConfigHistoryMgr) CreateConfigHistory(bean *model.ConfigHistory) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Create(bean).Error

	return
}

func (obj *_ConfigHistoryMgr) UpdateConfigHistory(bean *model.ConfigHistory) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(bean).Updates(bean).Error

	return
}

func (obj *_ConfigHistoryMgr) DeleteConfigHistory(bean *model.ConfigHistory) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(model.ConfigHistory{}).Delete(bean).Error

	return
}
