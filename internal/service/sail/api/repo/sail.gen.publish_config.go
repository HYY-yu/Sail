package repo

import (
	"context"
	"fmt"
	"gorm.io/gorm"
	"time"
)

// Code generated by gormt. DO NOT EDIT.

type _PublishConfigMgr struct {
	*_BaseMgr
}

// PublishConfigMgr open func
func PublishConfigMgr(db *gorm.DB) *_PublishConfigMgr {
	if db == nil {
		panic(fmt.Errorf("PublishConfigMgr need init by db"))
	}
	ctx, cancel := context.WithCancel(context.Background())
	return &_PublishConfigMgr{_BaseMgr: &_BaseMgr{DB: db.Table("publish_config"), isRelated: globalIsRelated, ctx: ctx, cancel: cancel, timeout: -1}}
}

// WithContext set context to db
func (obj *_PublishConfigMgr) WithContext(c context.Context) *_PublishConfigMgr {
	if c != nil {
		obj.ctx = c
	}
	return obj
}

func (obj *_PublishConfigMgr) WithSelects(idName string, selects ...string) *_PublishConfigMgr {
	if len(selects) > 0 {
		if len(idName) > 0 {
			selects = append(selects, idName)
		}
		// 对Select进行去重
		selectMap := make(map[string]int, len(selects))
		for _, e := range selects {
			if _, ok := selectMap[e]; !ok {
				selectMap[e] = 1
			}
		}

		newSelects := make([]string, 0, len(selects))
		for k := range selectMap {
			if len(k) > 0 {
				newSelects = append(newSelects, k)
			}
		}
		obj.DB = obj.DB.Select(newSelects)
	}
	return obj
}

func (obj *_PublishConfigMgr) WithOmit(omit ...string) *_PublishConfigMgr {
	if len(omit) > 0 {
		obj.DB = obj.DB.Omit(omit...)
	}
	return obj
}

func (obj *_PublishConfigMgr) WithOptions(opts ...Option) *_PublishConfigMgr {
	options := options{
		query: make(map[string]interface{}, len(opts)),
	}
	for _, o := range opts {
		o.apply(&options)
	}
	obj.DB = obj.DB.Where(options.query)
	return obj
}

// GetTableName get sql table name.获取数据库名字
func (obj *_PublishConfigMgr) GetTableName() string {
	return "publish_config"
}

// Reset 重置gorm会话
func (obj *_PublishConfigMgr) Reset() *_PublishConfigMgr {
	obj.new()
	return obj
}

// Get 获取
func (obj *_PublishConfigMgr) Get() (result PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Find(&result).Error

	return
}

// Gets 获取批量结果
func (obj *_PublishConfigMgr) Gets() (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Find(&results).Error

	return
}

func (obj *_PublishConfigMgr) Count(count *int64) (tx *gorm.DB) {
	return obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Count(count)
}

// WithID id获取
func (obj *_PublishConfigMgr) WithID(id int) Option {
	return optionFunc(func(o *options) { o.query["id"] = id })
}

// WithNamespaceID namespace_id获取
func (obj *_PublishConfigMgr) WithNamespaceID(namespaceID int) Option {
	return optionFunc(func(o *options) { o.query["namespace_id"] = namespaceID })
}

// WithStatus status获取
func (obj *_PublishConfigMgr) WithStatus(status int) Option {
	return optionFunc(func(o *options) { o.query["status"] = status })
}

// WithCreateTime create_time获取
func (obj *_PublishConfigMgr) WithCreateTime(createTime time.Time) Option {
	return optionFunc(func(o *options) { o.query["create_time"] = createTime })
}

// WithUpdateTime update_time获取
func (obj *_PublishConfigMgr) WithUpdateTime(updateTime time.Time) Option {
	return optionFunc(func(o *options) { o.query["update_time"] = updateTime })
}

// GetFromID 通过id获取内容
func (obj *_PublishConfigMgr) GetFromID(id int) (result PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`id` = ?", id).Find(&result).Error

	return
}

// GetBatchFromID 批量查找
func (obj *_PublishConfigMgr) GetBatchFromID(ids []int) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`id` IN (?)", ids).Find(&results).Error

	return
}

// GetFromNamespaceID 通过namespace_id获取内容
func (obj *_PublishConfigMgr) GetFromNamespaceID(namespaceID int) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`namespace_id` = ?", namespaceID).Find(&results).Error

	return
}

// GetBatchFromNamespaceID 批量查找
func (obj *_PublishConfigMgr) GetBatchFromNamespaceID(namespaceIDs []int) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`namespace_id` IN (?)", namespaceIDs).Find(&results).Error

	return
}

// GetFromStatus 通过status获取内容
func (obj *_PublishConfigMgr) GetFromStatus(status int) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`status` = ?", status).Find(&results).Error

	return
}

// GetBatchFromStatus 批量查找
func (obj *_PublishConfigMgr) GetBatchFromStatus(statuss []int) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`status` IN (?)", statuss).Find(&results).Error

	return
}

// GetFromCreateTime 通过create_time获取内容
func (obj *_PublishConfigMgr) GetFromCreateTime(createTime time.Time) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`create_time` = ?", createTime).Find(&results).Error

	return
}

// GetBatchFromCreateTime 批量查找
func (obj *_PublishConfigMgr) GetBatchFromCreateTime(createTimes []time.Time) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`create_time` IN (?)", createTimes).Find(&results).Error

	return
}

// GetFromUpdateTime 通过update_time获取内容
func (obj *_PublishConfigMgr) GetFromUpdateTime(updateTime time.Time) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`update_time` = ?", updateTime).Find(&results).Error

	return
}

// GetBatchFromUpdateTime 批量查找
func (obj *_PublishConfigMgr) GetBatchFromUpdateTime(updateTimes []time.Time) (results []*PublishConfig, err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Where("`update_time` IN (?)", updateTimes).Find(&results).Error

	return
}

func (obj *_PublishConfigMgr) CreatePublishConfig(bean *PublishConfig) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Create(bean).Error

	return
}

func (obj *_PublishConfigMgr) UpdatePublishConfig(bean *PublishConfig) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(bean).Updates(bean).Error

	return
}

func (obj *_PublishConfigMgr) DeletePublishConfig(bean *PublishConfig) (err error) {
	err = obj.DB.WithContext(obj.ctx).Model(PublishConfig{}).Delete(bean).Error

	return
}
