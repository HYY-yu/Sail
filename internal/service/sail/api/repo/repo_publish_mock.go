// Code generated by MockGen. DO NOT EDIT.
// Source: repo_publish.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	model "github.com/HYY-yu/sail/internal/service/sail/model"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPublishRepo is a mock of PublishRepo interface.
type MockPublishRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPublishRepoMockRecorder
}

// MockPublishRepoMockRecorder is the mock recorder for MockPublishRepo.
type MockPublishRepoMockRecorder struct {
	mock *MockPublishRepo
}

// NewMockPublishRepo creates a new mock instance.
func NewMockPublishRepo(ctrl *gomock.Controller) *MockPublishRepo {
	mock := &MockPublishRepo{ctrl: ctrl}
	mock.recorder = &MockPublishRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishRepo) EXPECT() *MockPublishRepoMockRecorder {
	return m.recorder
}

// Mgr mocks base method.
func (m *MockPublishRepo) Mgr(ctx context.Context, db *gorm.DB) PublishMgrInter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mgr", ctx, db)
	ret0, _ := ret[0].(PublishMgrInter)
	return ret0
}

// Mgr indicates an expected call of Mgr.
func (mr *MockPublishRepoMockRecorder) Mgr(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mgr", reflect.TypeOf((*MockPublishRepo)(nil).Mgr), ctx, db)
}

// MockPublishMgrInter is a mock of PublishMgrInter interface.
type MockPublishMgrInter struct {
	ctrl     *gomock.Controller
	recorder *MockPublishMgrInterMockRecorder
}

// MockPublishMgrInterMockRecorder is the mock recorder for MockPublishMgrInter.
type MockPublishMgrInterMockRecorder struct {
	mock *MockPublishMgrInter
}

// NewMockPublishMgrInter creates a new mock instance.
func NewMockPublishMgrInter(ctrl *gomock.Controller) *MockPublishMgrInter {
	mock := &MockPublishMgrInter{ctrl: ctrl}
	mock.recorder = &MockPublishMgrInterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishMgrInter) EXPECT() *MockPublishMgrInterMockRecorder {
	return m.recorder
}

// Catch mocks base method.
func (m *MockPublishMgrInter) Catch() (model.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Catch")
	ret0, _ := ret[0].(model.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Catch indicates an expected call of Catch.
func (mr *MockPublishMgrInterMockRecorder) Catch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Catch", reflect.TypeOf((*MockPublishMgrInter)(nil).Catch))
}

// Count mocks base method.
func (m *MockPublishMgrInter) Count() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPublishMgrInterMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPublishMgrInter)(nil).Count))
}

// CreatePublish mocks base method.
func (m *MockPublishMgrInter) CreatePublish(bean *model.Publish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublish", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePublish indicates an expected call of CreatePublish.
func (mr *MockPublishMgrInterMockRecorder) CreatePublish(bean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublish", reflect.TypeOf((*MockPublishMgrInter)(nil).CreatePublish), bean)
}

// DeletePublish mocks base method.
func (m *MockPublishMgrInter) DeletePublish(bean *model.Publish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublish", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublish indicates an expected call of DeletePublish.
func (mr *MockPublishMgrInterMockRecorder) DeletePublish(bean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublish", reflect.TypeOf((*MockPublishMgrInter)(nil).DeletePublish), bean)
}

// FetchIndexByProjectID mocks base method.
func (m *MockPublishMgrInter) FetchIndexByProjectID(projectID, namespaceID int, status int8) ([]*model.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchIndexByProjectID", projectID, namespaceID, status)
	ret0, _ := ret[0].([]*model.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchIndexByProjectID indicates an expected call of FetchIndexByProjectID.
func (mr *MockPublishMgrInterMockRecorder) FetchIndexByProjectID(projectID, namespaceID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchIndexByProjectID", reflect.TypeOf((*MockPublishMgrInter)(nil).FetchIndexByProjectID), projectID, namespaceID, status)
}

// Get mocks base method.
func (m *MockPublishMgrInter) Get() (model.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(model.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPublishMgrInterMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPublishMgrInter)(nil).Get))
}

// GetTableName mocks base method.
func (m *MockPublishMgrInter) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockPublishMgrInterMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockPublishMgrInter)(nil).GetTableName))
}

// Gets mocks base method.
func (m *MockPublishMgrInter) Gets() ([]model.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets")
	ret0, _ := ret[0].([]model.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockPublishMgrInterMockRecorder) Gets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockPublishMgrInter)(nil).Gets))
}

// HasRecord mocks base method.
func (m *MockPublishMgrInter) HasRecord() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRecord")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRecord indicates an expected call of HasRecord.
func (mr *MockPublishMgrInterMockRecorder) HasRecord() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRecord", reflect.TypeOf((*MockPublishMgrInter)(nil).HasRecord))
}

// ListPublish mocks base method.
func (m *MockPublishMgrInter) ListPublish(limit, offset int, sort string) ([]model.Publish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublish", limit, offset, sort)
	ret0, _ := ret[0].([]model.Publish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublish indicates an expected call of ListPublish.
func (mr *MockPublishMgrInterMockRecorder) ListPublish(limit, offset, sort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublish", reflect.TypeOf((*MockPublishMgrInter)(nil).ListPublish), limit, offset, sort)
}

// Reset mocks base method.
func (m *MockPublishMgrInter) Reset() *_PublishMgr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(*_PublishMgr)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockPublishMgrInterMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPublishMgrInter)(nil).Reset))
}

// Tx mocks base method.
func (m *MockPublishMgrInter) Tx(tx *gorm.DB) *_PublishMgr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx", tx)
	ret0, _ := ret[0].(*_PublishMgr)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockPublishMgrInterMockRecorder) Tx(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockPublishMgrInter)(nil).Tx), tx)
}

// UpdatePublish mocks base method.
func (m *MockPublishMgrInter) UpdatePublish(bean *model.Publish) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublish", bean)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePublish indicates an expected call of UpdatePublish.
func (mr *MockPublishMgrInterMockRecorder) UpdatePublish(bean interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublish", reflect.TypeOf((*MockPublishMgrInter)(nil).UpdatePublish), bean)
}

// WithCreateTime mocks base method.
func (m *MockPublishMgrInter) WithCreateTime(createTime interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{createTime}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithCreateTime", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithCreateTime indicates an expected call of WithCreateTime.
func (mr *MockPublishMgrInterMockRecorder) WithCreateTime(createTime interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{createTime}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCreateTime", reflect.TypeOf((*MockPublishMgrInter)(nil).WithCreateTime), varargs...)
}

// WithID mocks base method.
func (m *MockPublishMgrInter) WithID(id interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{id}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithID", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithID indicates an expected call of WithID.
func (mr *MockPublishMgrInterMockRecorder) WithID(id interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{id}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithID", reflect.TypeOf((*MockPublishMgrInter)(nil).WithID), varargs...)
}

// WithNamespaceID mocks base method.
func (m *MockPublishMgrInter) WithNamespaceID(namespaceID interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{namespaceID}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithNamespaceID", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithNamespaceID indicates an expected call of WithNamespaceID.
func (mr *MockPublishMgrInterMockRecorder) WithNamespaceID(namespaceID interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{namespaceID}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithNamespaceID", reflect.TypeOf((*MockPublishMgrInter)(nil).WithNamespaceID), varargs...)
}

// WithOptions mocks base method.
func (m *MockPublishMgrInter) WithOptions(opts ...Option) *_PublishMgr {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithOptions", varargs...)
	ret0, _ := ret[0].(*_PublishMgr)
	return ret0
}

// WithOptions indicates an expected call of WithOptions.
func (mr *MockPublishMgrInterMockRecorder) WithOptions(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOptions", reflect.TypeOf((*MockPublishMgrInter)(nil).WithOptions), opts...)
}

// WithPrepareStmt mocks base method.
func (m *MockPublishMgrInter) WithPrepareStmt() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WithPrepareStmt")
}

// WithPrepareStmt indicates an expected call of WithPrepareStmt.
func (mr *MockPublishMgrInterMockRecorder) WithPrepareStmt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPrepareStmt", reflect.TypeOf((*MockPublishMgrInter)(nil).WithPrepareStmt))
}

// WithProjectID mocks base method.
func (m *MockPublishMgrInter) WithProjectID(projectID interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{projectID}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithProjectID", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithProjectID indicates an expected call of WithProjectID.
func (mr *MockPublishMgrInterMockRecorder) WithProjectID(projectID interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{projectID}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithProjectID", reflect.TypeOf((*MockPublishMgrInter)(nil).WithProjectID), varargs...)
}

// WithPublishToken mocks base method.
func (m *MockPublishMgrInter) WithPublishToken(publishToken interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{publishToken}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithPublishToken", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithPublishToken indicates an expected call of WithPublishToken.
func (mr *MockPublishMgrInterMockRecorder) WithPublishToken(publishToken interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{publishToken}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithPublishToken", reflect.TypeOf((*MockPublishMgrInter)(nil).WithPublishToken), varargs...)
}

// WithSelects mocks base method.
func (m *MockPublishMgrInter) WithSelects(idName string, selects ...string) *_PublishMgr {
	m.ctrl.T.Helper()
	varargs := []interface{}{idName}
	for _, a := range selects {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithSelects", varargs...)
	ret0, _ := ret[0].(*_PublishMgr)
	return ret0
}

// WithSelects indicates an expected call of WithSelects.
func (mr *MockPublishMgrInterMockRecorder) WithSelects(idName interface{}, selects ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{idName}, selects...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithSelects", reflect.TypeOf((*MockPublishMgrInter)(nil).WithSelects), varargs...)
}

// WithStatus mocks base method.
func (m *MockPublishMgrInter) WithStatus(status interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{status}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithStatus", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithStatus indicates an expected call of WithStatus.
func (mr *MockPublishMgrInterMockRecorder) WithStatus(status interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{status}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatus", reflect.TypeOf((*MockPublishMgrInter)(nil).WithStatus), varargs...)
}

// WithUpdateTime mocks base method.
func (m *MockPublishMgrInter) WithUpdateTime(updateTime interface{}, cond ...string) Option {
	m.ctrl.T.Helper()
	varargs := []interface{}{updateTime}
	for _, a := range cond {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WithUpdateTime", varargs...)
	ret0, _ := ret[0].(Option)
	return ret0
}

// WithUpdateTime indicates an expected call of WithUpdateTime.
func (mr *MockPublishMgrInterMockRecorder) WithUpdateTime(updateTime interface{}, cond ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{updateTime}, cond...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUpdateTime", reflect.TypeOf((*MockPublishMgrInter)(nil).WithUpdateTime), varargs...)
}
