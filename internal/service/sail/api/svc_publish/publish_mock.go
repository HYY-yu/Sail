// Code generated by MockGen. DO NOT EDIT.
// Source: publish.go

// Package mock_svc_publish is a generated GoMock package.
package svc_publish

import (
	context "context"
	reflect "reflect"

	model "github.com/HYY-yu/sail/internal/service/sail/model"
	gomock "github.com/golang/mock/gomock"
)

// MockPublishSystem is a mock of PublishSystem interface.
type MockPublishSystem struct {
	ctrl     *gomock.Controller
	recorder *MockPublishSystemMockRecorder
}

// MockPublishSystemMockRecorder is the mock recorder for MockPublishSystem.
type MockPublishSystemMockRecorder struct {
	mock *MockPublishSystem
}

// NewMockPublishSystem creates a new mock instance.
func NewMockPublishSystem(ctrl *gomock.Controller) *MockPublishSystem {
	mock := &MockPublishSystem{ctrl: ctrl}
	mock.recorder = &MockPublishSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublishSystem) EXPECT() *MockPublishSystemMockRecorder {
	return m.recorder
}

// EnterPublish mocks base method.
func (m *MockPublishSystem) EnterPublish(ctx context.Context, projectID, namespaceID, configID int, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterPublish", ctx, projectID, namespaceID, configID, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterPublish indicates an expected call of EnterPublish.
func (mr *MockPublishSystemMockRecorder) EnterPublish(ctx, projectID, namespaceID, configID, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterPublish", reflect.TypeOf((*MockPublishSystem)(nil).EnterPublish), ctx, projectID, namespaceID, configID, content)
}

// QueryPublishConfig mocks base method.
func (m *MockPublishSystem) QueryPublishConfig(ctx context.Context, configID int) (model.PublishConfig, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPublishConfig", ctx, configID)
	ret0, _ := ret[0].(model.PublishConfig)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryPublishConfig indicates an expected call of QueryPublishConfig.
func (mr *MockPublishSystemMockRecorder) QueryPublishConfig(ctx, configID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPublishConfig", reflect.TypeOf((*MockPublishSystem)(nil).QueryPublishConfig), ctx, configID)
}

// MockConfigSystem is a mock of ConfigSystem interface.
type MockConfigSystem struct {
	ctrl     *gomock.Controller
	recorder *MockConfigSystemMockRecorder
}

// MockConfigSystemMockRecorder is the mock recorder for MockConfigSystem.
type MockConfigSystemMockRecorder struct {
	mock *MockConfigSystem
}

// NewMockConfigSystem creates a new mock instance.
func NewMockConfigSystem(ctrl *gomock.Controller) *MockConfigSystem {
	mock := &MockConfigSystem{ctrl: ctrl}
	mock.recorder = &MockConfigSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigSystem) EXPECT() *MockConfigSystemMockRecorder {
	return m.recorder
}

// ConfigEdit mocks base method.
func (m *MockConfigSystem) ConfigEdit() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigEdit")
}

// ConfigEdit indicates an expected call of ConfigEdit.
func (mr *MockConfigSystemMockRecorder) ConfigEdit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigEdit", reflect.TypeOf((*MockConfigSystem)(nil).ConfigEdit))
}

// ConfigKey mocks base method.
func (m *MockConfigSystem) ConfigKey(isPublic bool, projectGroupID int, projectKey, namespaceName, configName string, configType model.ConfigType) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigKey", isPublic, projectGroupID, projectKey, namespaceName, configName, configType)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConfigKey indicates an expected call of ConfigKey.
func (mr *MockConfigSystemMockRecorder) ConfigKey(isPublic, projectGroupID, projectKey, namespaceName, configName, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigKey", reflect.TypeOf((*MockConfigSystem)(nil).ConfigKey), isPublic, projectGroupID, projectKey, namespaceName, configName, configType)
}

// GetConfig mocks base method.
func (m *MockConfigSystem) GetConfig(ctx context.Context, configID int) (*model.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, configID)
	ret0, _ := ret[0].(*model.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigSystemMockRecorder) GetConfig(ctx, configID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigSystem)(nil).GetConfig), ctx, configID)
}

// GetConfigProjectAndNamespace mocks base method.
func (m *MockConfigSystem) GetConfigProjectAndNamespace(ctx context.Context, projectID, namespaceID int) (*model.Project, *model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigProjectAndNamespace", ctx, projectID, namespaceID)
	ret0, _ := ret[0].(*model.Project)
	ret1, _ := ret[1].(*model.Namespace)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConfigProjectAndNamespace indicates an expected call of GetConfigProjectAndNamespace.
func (mr *MockConfigSystemMockRecorder) GetConfigProjectAndNamespace(ctx, projectID, namespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigProjectAndNamespace", reflect.TypeOf((*MockConfigSystem)(nil).GetConfigProjectAndNamespace), ctx, projectID, namespaceID)
}
